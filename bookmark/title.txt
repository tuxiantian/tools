1 简洁之美 @1
1)⼀⾏代码交换 a, b ：@1
2)⼀⾏代码反转列表@1
3)⼀⾏代码合并两个字典@1
4)⼀⾏代码列表去重@2
5) ⼀⾏代码求多个列表中的最⼤值 @3
6) ⼀⾏代码⽣成逆序序列 @3
2 Python绘图 @3
3 Python动画 @4
4 Python数据分析 @6
5 Python机器学习 @6
6 Python-GUI@6
1 求绝对值 @6
2 元素都为真 @7
3 元素⾄少⼀个为真 @7
4 ascii展⽰对象 @7
5 ⼗转⼆ @7
6 ⼗转⼋ @7
7 ⼗转⼗六 @8
8 判断是真是假 @8
9 字符串转字节 @8
10 转为字符串 @8
11 是否可调⽤ @8
12 ⼗转ASCII@9
13 ASCII转⼗ @9
14 类⽅法 @9
15 执⾏字符串表⽰的代码 @10
16 创建复数 @10
17 动态删除属性 @10
18 转为字典 @10
19 ⼀键查看对象所有⽅法 @11
20 取商和余数 @11
21 枚举对象 @11
1 a@12
2 b@12
3 c@12
22 计算表达式 @12
23 查看变量所占字节数 @12
24 过滤器 @12
25 转为浮点类型 @12
26 字符串格式化 @13
3.1415926  {:.2f}  3.14  保留⼩数点后两位 @13
3.1415926  {:+.2f}  +3.14  带符号保留⼩数点后两位 @13
2.71828  {:.0f}  3  不带⼩数 @13
5  {:0>2d}  05  数字补零 (填充左边, 宽度为2)@13
5  {:x<4d}  5xxx  数字补x (填充右边, 宽度为4)@13
10  {:x<4d}  10xx  数字补x (填充右边, 宽度为4)@13
1000000  {:,}  1,000,000  以逗号分隔的数字格式 @13
0.25  {:.2%}  25.00%  百分⽐格式 @13
1000000000  {:.2e}  1.00e+09  指数记法 @13
18  {:>10d}  ' 18'  右对齐 (默认, 宽度为10)@13
18  {:<10d}  '18 '  左对齐 (宽度为10)@13
18  {:^10d}  ' 18 '  中间对齐 (宽度为10)@13
27 冻结集合 @13
28 动态获取对象属性 @13
29 对象是否有这个属性 @14
30 返回对象的哈希值 @14
31 ⼀键帮助 @14
32 对象门牌号 @14
33 获取⽤户输⼊ @15
34 转为整型 @15
35 isinstance@15
36 ⽗⼦关系鉴定 @15
37 创建迭代器类型 @16
1@16
3@16
5@16
1@16
3@16
2@16
3@16
4@16
5@16
38 所有对象之根 @16
39 打开⽂件 @16
40 次幂 @17
41 打印 @17
42 创建属性的两种⽅式 @17
43 创建range序列 @18
1) range(stop) 2) range(start, stop[,step])@18
44 反向迭代器 @18
1@19
3@19
2@19
4@19
1@19
45 四舍五⼊ @19
46 转为集合类型 @19
47 转为切⽚对象 @19
48 拿来就⽤的排序函数 @19
49 求和函数 @20
50 转元组 @20
51 查看对象类型 @20
52 聚合迭代器 @21
53 nonlocal⽤于内嵌函数中 @21
54 global 声明全局变量 @21
55 链式⽐较 @22
56 不⽤else和if实现计算器 @22
57 链式操作 @22
58 交换两元素 @23
59 去最求平均 @23
60 打印99乘法表 @23
1*1=1@23
1*2=2  2*2=4@23
1*3=3  2*3=6  3*3=9@23
1*4=4  2*4=8  3*4=12  4*4=16@23
1*5=5  2*5=10  3*5=15  4*5=20  5*5=25@23
1*6=6  2*6=12  3*6=18  4*6=24  5*6=30  6*6=36@23
1*7=7  2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49@23
1*8=8  2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64@23
1*9=9  2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81@23
61 全展开 @24
62 列表等分 @24
63 列表压缩 @25
64 更长列表 @25
65 求众数 @25
66 多表之最 @25
67 列表查重 @25
68 列表反转 @26
69 浮点数等差数列 @26
70 按条件分组 @26
71 map实现向量运算 @26
72 值最⼤的字典 @26
73 合并两个字典 @27
74 topn字典 @27
75 异位词 @27
76 逻辑上合并字典 @27
77 命名元组提⾼可读性 @28
78 样本抽样 @28
79 重洗数据集 @28
80 10个均匀分布的坐标点 @28
81 10个⾼斯分布的坐标点 @28
82 chain⾼效串联多个容器对象 @29
1@29
3@29
5@29
0@29
2@29
4@29
6@29
83 操作函数对象 @29
84 ⽣成逆序序列 @29
85 函数的五类参数使⽤例⼦ @30
86 使⽤slice对象 @31
87 lambda 函数的动画演⽰ @32
88 粘性之禅 @33
7 ⾏代码够烧脑，不信试试~~@33
89 元类 @34
90 对象序列化 @35
1 反转字符串 @36
2 字符串切⽚操作 @36
3 join串联字符串 @36
4 字符串的字节长度 @36
5 查找第⼀个匹配串 @37
6 查找所有1的索引 @37
7 \d 匹配数字[0-9]@37
8 匹配浮点数和整数 @37
9 ^匹配字符串的开头 @38
10 re.I 忽略⼤⼩写 @38
11 理解compile的作⽤ @38
12 使⽤()捕获单词，不想带空格 @38
13 split分割单词 @39
14 match从字符串开始位置匹配 @39
2) search函数 search是从字符串的任意位置开始匹配 @39
15 替换匹配的⼦串 @39
16 贪⼼捕获 @40
17 ⾮贪⼼捕获 @40
18 常⽤元字符总结 @40
19 常⽤通⽤字符总结 @40
20 密码安全检查 @40
21 爬取百度⾸页标题 @41
22 批量转化为驼峰格式(Camel)@41
23 str1是否为str2的permutation@42
24 str1是否由str2旋转⽽来 @43
25 正浮点数 @43
0.0 到 1.0 间的浮点数： ^0\.\d*[1-9]\d*$@44
1 获取后缀名 @45
2 ⽂件读操作 @45
3 ⽂件写操作 @45
4 路径中的⽂件名 @46
5 批量修改⽂件后缀 @46
6 xls批量转换成xlsx@47
7 定制⽂件不同⾏ @48
8 获取指定后缀名的⽂件 @49
9 批量获取⽂件修改时间 @50
10 批量压缩⽂件 @51
11 32位加密 @51
12 年的⽇历图 @51
2019@52
1  2  3  4  5  6  1  2  3  1  2  3@52
7  8  9 10 11 12 13  4  5  6  7  8  9 10  4  5  6  7  8  9 10@52
14 15 16 17 18 19 20  11 12 13 14 15 16 17  11 12 13 14 15 16 17@52
21 22 23 24 25 26 27  18 19 20 21 22 23 24  18 19 20 21 22 23 24@52
28 29 30 31  25 26 27 28  25 26 27 28 29 30 31@52
1  2  3  4  5  6  7  1  2  3  4  5  1  2@52
8  9 10 11 12 13 14  6  7  8  9 10 11 12  3  4  5  6  7  8  9@52
15 16 17 18 19 20 21  13 14 15 16 17 18 19  10 11 12 13 14 15 16@52
22 23 24 25 26 27 28  20 21 22 23 24 25 26  17 18 19 20 21 22 23@52
29 30  27 28 29 30 31  24 25 26 27 28 29 30@52
1  2  3  4  5  6  7  1  2  3  4  1@52
8  9 10 11 12 13 14  5  6  7  8  9 10 11  2  3  4  5  6  7  8@52
15 16 17 18 19 20 21  12 13 14 15 16 17 18  9 10 11 12 13 14 15@52
22 23 24 25 26 27 28  19 20 21 22 23 24 25  16 17 18 19 20 21 22@52
29 30 31  26 27 28 29 30 31  23 24 25 26 27 28 29@52
30@52
1  2  3  4  5  6  1  2  3  1@52
7  8  9 10 11 12 13  4  5  6  7  8  9 10  2  3  4  5  6  7  8@52
14 15 16 17 18 19 20  11 12 13 14 15 16 17  9 10 11 12 13 14 15@52
21 22 23 24 25 26 27  18 19 20 21 22 23 24  16 17 18 19 20 21 22@52
28 29 30 31  25 26 27 28 29 30  23 24 25 26 27 28 29@52
30 31@52
13 判断是否为闰年 @52
2019年不是闰年 @52
3 ⽉的⽇历图 @52
1@53
2  3  4  5  6  7  8@53
9 10 11 12 13 14 15@53
16 17 18 19 20 21 22@53
23 24 25 26 27 28 29@53
30 31@53
14 ⽉有⼏天 @53
2019年-12⽉的第⼀天是那⼀周的第6天 @53
2019年-12⽉共有31天 @53
15 ⽉第⼀天 @53
16 ⽉最后⼀天 @53
17 获取当前时间 @54
18:13:41@54
18 字符时间转时间 @54
19 时间转字符时间 @54
20 默认启动主线程 @55
21 创建线程 @55
3 交替获得CPU时间⽚ @56
22 多线程抢夺同⼀个变量 @56
23 代码稍作改动，叫问题暴露出来 @57
24 加上⼀把锁，避免以上情况出现 @58
25 1 分钟掌握 time 模块 @59
1 此时此刻时间浮点数 @59
2 时间数组 @60
3 时间字符串 @60
4 格式化时间字符串 @60
5 字符时间转时间数组 @60
26 4G 内存处理 10G ⼤⼩的⽂件 @60
4G 内存处理 10G ⼤⼩的⽂件，单机怎么做？ @60
1 寻找第n次出现位置 @62
2 斐波那契数列前n项 @62
3 找出所有重复元素 @62
4 联合统计次数 @62
5 groupby单字段分组 @63
6 itemgetter和key函数 @63
7 groupby多字段分组 @64
8 sum函数计算和聚合同时做 @64
9 list分组(⽣成器版)@65
10 列表全展开（⽣成器版） @65
11 测试函数运⾏时间的装饰器 @65
12 统计异常出现次数和时间的装饰器 @66
13 测试运⾏时长的装饰器 @67
14 装饰器通俗理解 @68
15 定制递减迭代器 @69
1 __nex__名字不能变，实现定制的迭代逻辑 @70
2 raise StopIteration：通过 raise 中断程序，必须这样写 @70
1 turtle绘制奥运五环图 @70
1 导⼊库 @70
2 定义画圆函数 @70
3 画笔基本设置 @70
4 绘制五环图 @70
2 turtle绘制漫天雪花 @71
3 wordcloud词云图 @72
4 plotly画柱状图和折线图 @73
5 seaborn热⼒图 @74
6 matplotlib折线图 @75
7 matplotlib散点图 @76
8 matplotlib柱状图 @77
9 matplotlib等⾼线图 @79
10 imshow图 @79
11 pyecharts绘制仪表盘 @81
12 pyecharts漏⽃图 @81
13 pyecharts⽇历图 @82
14 pyecharts绘制graph图 @83
15 pyecharts⽔球图 @84
16 pyecharts饼图 @85
17 pyecharts极坐标图 @86
18 pyecharts词云图 @87
19 pyecharts系列柱状图 @88
20 pyecharts热⼒图 @89
21 matplotlib绘制动画 @90
1,  # width@91
22 pyecharts绘图属性设置⽅法 @91
23 pyecharts绘图属性设置⽅法(下)@93
1)柱状图显⽰效果动画对应控制代码： @93
2)柱状图显⽰主题对应控制代码： @93
3)添加x轴对应的控制代码： @93
4)添加y轴对应的控制代码： @93
5)修改柱间距对应的控制代码： @93
6)A系列柱⼦是否显⽰对应的控制代码： @94
7)A系列柱⼦颜⾊渐变对应的控制代码： @94
1, [{@94
8)A系列柱⼦最⼤和最⼩值 标记点 对应的控制代码： @94
9)A系列柱⼦最⼤和最⼩值 标记线 对应的控制代码： @94
10)柱状图标题对应的控制代码： @94
11)柱状图⾮常有⽤的toolbox显⽰对应的控制代码： @94
12)Y轴显⽰在右侧对应的控制代码： @94
13)Y轴名称对应的控制代码： @94
14)数据轴区域放⼤缩⼩设置对应的控制代码： @95
1, [{@95
24 pyecharts原来可以这样快速⼊门(上) @95
1)简洁的 API 设计，使⽤如丝滑般流畅，⽀持链式调⽤;@96
2)囊括了 30+ 种常见图表，应有尽有;@96
3)⽀持主流 Notebook 环境，Jupyter Notebook 和 JupyterLab;@96
4)可轻松集成⾄ Flask，Django 等主流 Web 框架;@96
5)⾼度灵活的配置项，可轻松搭配出精美的图表 @96
1)为什么根据图1中的包结构，为什么不这么写： from pyecharts.charts.basic_charts import@97
2) Bar(RectChart)是什么意思 @97
25 pyecharts原来可以这样快速⼊门(中)@98
26 pyecharts原来可以这样快速⼊门(下)@99
1)与包结构组织相关的 __init__.py； @101
2)类的继承关系:Bar->RectChart->Chart； @101
3)链式调⽤； @101
4)重要的参数配置包 options，以TitleOpts类为例， set_global_opts将它装载到Bar类中实现属性 @101
27 1 分钟学会画 pairplot 图 @101
0  5.1  3.5  1.4  0.2  setosa@101
1  4.9  3.0  1.4  0.2  setosa@101
2  4.7  3.2  1.3  0.2  setosa@101
3  4.6  3.1  1.5  0.2  setosa@101
4  5.0  3.6  1.4  0.2  setosa@101
145  6.7  3.0  5.2  2.3  virginica@101
146  6.3  2.5  5.0  1.9  virginica@101
147  6.5  3.0  5.2  2.0  virginica@101
148  6.2  3.4  5.4  2.3  virginica@101
149  5.9  3.0  5.1  1.8  virginica@101
1 含单个元素的元组 @104
2 默认参数设为空 @104
3 共享变量未绑定之坑 @104
4 lambda⾃由参数之坑 @104
5 各种参数使⽤之坑 @105
6 列表删除之坑 @107
7 列表快速复制之坑 @107
4]]@107
8 字符串驻留 @108
9 相同值的不可变对象 @108
10 对象销毁顺序 @108
11 充分认识for@109
0@109
1@109
2@109
3@109
4@109
12 认识执⾏时机 @109
13 创建空集合错误 @110
14 pyecharts传⼊Numpy数据绘图失败 @110
1 优化代码异常输出包 @112
2019.11.50794\pythonFiles\ptvsd_launcher.py", line 43, in <module>@112
2019.11.50794\pythonFiles\lib\python\old_ptvsd\ptvsd\__main__.py",@112
2019.11.50794\pythonFiles\lib\python\old_ptvsd\ptvsd\__main__.py",@112
2 图像处理包pillow@114
3 ⼀⾏代码找到编码 @116
1 领略算法魅⼒ @118
2 排序算法的动画展⽰ @119
22, 11, 25, 33, 32, 1, 25, 3, 8, 7, 1, 34, 7]@119
3 先拿冒泡实验 @120
4 快速排序 @121
5 选择排序 @122
6 堆排序 @123
7 综合 @124
8 优化算法 @124
1. 仅含等式约束 @124
2. 仅含不等式约束 @124
3. 等式和不等式约束混合型 @124
9 仅含等式约束 @124
10 找找感觉 @125
11 梯度下降 @127
12 约束⾯的法向 @129
13 ⼤胆猜想 @131
14 完全解码拉格朗⽇乘数法 @132
15 均匀分布 @133
16 ⼆项分布 @134
17 ⾼斯分布 @135
18 beta分布 @135
1 环境搭建 @136
2 pytorch慢到⽆法安装，怎么办？ @137
1 安装慢到装不上 @137
2 这样能正常安装 @138
3 最关键⼀步 @138
4 测试是否安装成功 @139
3 ⾃动群发邮件 @139
4 ⼆分搜索 @140
5 爬取天⽓数据并解析温度值 @141
9]*?°C', x).group(1) ) )@143
9]*?)°C', x).group(1) ) )@143
0  ⾹河  11/-5°C  11  -5@143
1  涿州  14/-5°C  14  -5@143
2  唐⼭  12/-6°C  12  -6@143
3  沧州  12/-5°C  12  -5@143
4  天津  11/-1°C  11  -1@143
5  廊坊  11/-5°C  11  -5@143
6  太原  8/-7°C  8  -7@143
7  ⽯家庄  13/-2°C  13  -2 @143
8  涿⿅  8/-6°C  8  -6@144
9  张家⼜  5/-9°C  5  -9@144
10  保定  14/-6°C  14  -6@144
11  三河  11/-4°C  11  -4@144
12  北京孔庙  13/-3°C  13  -3@144
13  北京国⼦监  13/-3°C  13  -3@144
14  中国地质博物馆  12/-3°C  12  -3@144
15  ⽉坛公园  12/-3°C  12  -3@144
16  明城墙遗址公园  13/-3°C  13  -3@144
17  北京市规划展览馆  12/-2°C  12  -2@144
18  什刹海  12/-3°C  12  -3@144
19  南锣⿎巷  13/-3°C  13  -3@144
20  天坛公园  12/-2°C  12  -2@144
21  北海公园  12/-2°C  12  -2@144
22  景⼭公园  12/-2°C  12  -2@144
23  北京海洋馆  12/-3°C  12  -3@144
6 制作⼩⽽美的计算器 @144
1) ui设计 @144
2) 转py⽂件 @146
3) 计算器实现逻辑 @146
1 创建DataFrame@150
0  apple1  1.0@150
1  apple2  2.0@150
2  apple3  3.0@150
3  apple4  4.0@150
4  apple5  5.0@150
0  1.0  2.0  3.0  4.0  5.0@150
0  1.0  2.0  3.0  4.0  5.0@150
5.0}@150
2 导⼊数据 @150
1. movies.dat@150
2. ratings.dat@150
3. users.dat@150
0  8  Edison Kinetoscopic Record of a Sneeze (1894)@151
1  10  La sortie des usines Lumi猫re (1895)@151
2  12  The Arrival of a Train (1896)@151
3  25  The Oxford and Cambridge University Boat Race ...@151
4  91  Le manoir du diable (1896)@151
5  131  Une nuit terrible (1896)@151
6  417  Le voyage dans la lune (1902)@151
7  439  The Great Train Robbery (1903)@151
8  443  Hiawatha, the Messiah of the Ojibway (1903)@151
9  628  The Adventures of Dollie (1908)@151
0  Documentary|Short@151
1  Documentary|Short@151
2  Documentary|Short@151
3  NaN@151
4  Short|Horror@151
5  Short|Comedy|Horror@151
6  Short|Action|Adventure|Comedy|Fantasy|Sci-Fi@151
7  Short|Action|Crime|Western@151
8  NaN@151
9  Action|Short@151
0  1  397291295@151
1  2  40501255@151
2  3  417333257@151
3  4  138805259@151
4  5  2452094989@151
5  6  391774225@151
6  7  47317010@151
7  8  84541461@151
8  9  2445803544@151
9  10  995885060@151
0  1  111161  10  1373234211@152
1  1  117060  7  1373415231@152
2  1  120755  6  1373424360@152
3  1  317919  6  1373495763@152
4  1  454876  10  1373621125@152
5  1  790724  8  1374641320@152
6  1  882977  8  1372898763@152
7  1  1229238  9  1373506523@152
8  1  1288558  5  1373154354@152
9  1  1300854  8  1377165712@152
3 处理组合值 @152
0  False@153
1  False@153
2  False@153
3  False@153
4  False@153
5  True@153
6  True@153
7  False@153
8  False@153
9  False@153
4 访问某列 @153
5  131@153
6  417@153
15  2354@153
18  3863@153
19  4099@153
20  4100@153
21  4101@153
22  4210@153
23  4395@153
25  4518@153
1-4介绍 数据读⼊ ， 处理组合值 ， 索引数据 等, pandas中使⽤较多的函数，基于Kaggle真实电影影评数 @153
5  131@154
6  417@154
15  2354@154
18  3863@154
19  4099@154
20  4100@154
21  4101@154
22  4210@154
23  4395@154
25  4518@154
5 连接两个表 @154
0  1  111161  10  1373234211@154
1  1  117060  7  1373415231@154
2  1  120755  6  1373424360@154
3  1  317919  6  1373495763@154
4  1  454876  10  1373621125@154
5  1  790724  8  1374641320@154
6  1  882977  8  1372898763@154
7  1  1229238  9  1373506523@154
8  1  1288558  5  1373154354@154
9  1  1300854  8  1377165712@154
0  1  111161  10  1373234211  NaN  NaN@155
1  1  117060  7  1373415231  NaN  NaN@155
2  1  120755  6  1373424360  NaN  NaN@155
3  1  317919  6  1373495763  NaN  NaN@155
4  1  454876  10  1373621125  NaN  NaN@155
5  1  790724  8  1374641320  NaN  NaN@155
6  1  882977  8  1372898763  NaN  NaN@155
7  1  1229238  9  1373506523  NaN  NaN@155
8  1  1288558  5  1373154354  NaN  NaN@155
9  1  1300854  8  1377165712  NaN  NaN@155
6 按列筛选 @155
12  1  1588173  9  1372821281  Warm Bodies (2013)@155
13  1  1711425  3  1372604878  21 & Over (2013)@155
14  1  2024432  8  1372703553  Identity Thief (2013)@155
17  1  2101441  1  1372633473  Spring Breakers (2012)@155
28  2  1431045  7  1457733508  Deadpool (2016)@155
12  Comedy|Horror|Romance@155
13  Comedy@155
14  Adventure|Comedy|Crime|Drama@155
17  Comedy|Crime|Drama@155
28  Action|Adventure|Comedy|Sci-Fi@155
12  1  1588173  9  1372821281  Warm Bodies (2013)@156
13  1  1711425  3  1372604878  21 & Over (2013)@156
14  1  2024432  8  1372703553  Identity Thief (2013)@156
17  1  2101441  1  1372633473  Spring Breakers (2012)@156
28  2  1431045  7  1457733508  Deadpool (2016)@156
12  Comedy|Horror|Romance@156
13  Comedy@156
14  Adventure|Comedy|Crime|Drama@156
17  Comedy|Crime|Drama@156
28  Action|Adventure|Comedy|Sci-Fi@156
7 按照Movie ID 分组 @156
131  34861.000000  7.0  1.540639e+09@156
417  34121.409091  8.5  1.458680e+09@156
2354  6264.000000  8.0  1.456343e+09@156
3863  43803.000000  10.0  1.430439e+09@156
4099  25084.500000  7.0  1.450323e+09@156
8 按照电影得分排序 @156
7134690 30110.0 10.0  1.524974e+09@156
416889  1319.0  10.0  1.543320e+09@156
57840  23589.0 10.0  1.396802e+09@156
5693562 50266.0 10.0  1.511024e+09@156
5074  43803.0 10.0  1.428352e+09@156
9 分组后使⽤聚合函数 @156
417  22@157
2354  1@157
3863  1@157
4099  2@157
4100  1@157
4101  1@157
4210  1@157
4395  1@157
4518  1@157
4546  2@157
4936  2@157
5074  1@157
5571  1@157
6177  1@157
6414  3@157
6684  1@157
6689  1@157
7145  1@157
7162  2@157
25%  1.000000@158
50%  2.000000@158
75%  7.000000@158
10 频率分布直⽅图 @159
118.,  114.,  90.,  104.,  81.,  80.,  73.,  62.,  65.,@159
52.])@159
11 最⼩抽样量 @159
417 22  8.500000  1.263027@160
12349  68  8.485294  1.227698@160
15324  20  8.350000  1.039990@160
15864  51  8.431373  1.374844@160
17925  44  8.636364  1.259216@160
417  135.712480@160
12349  128.671290@160
15324  95.349276@160
15864  163.434005@160
17925  130.668350@160
53604  129 8.635659  1.230714@160
57012  207 8.449275  1.537899@160
70735  224 8.839286  1.190799@160
75686  209 8.095694  1.358885@160
88763  296 8.945946  1.026984@160
6320628 860 7.966279  1.469924@160
6412452 276 7.510870  1.389529@160
6662050 22  10.000000  0.000000@160
6966692 907 8.673649  1.286455@160
7131622 1102  7.851180  1.751500@160
173 rows × 3 columns@160
12 去重和连表 @160
6662050 22  10.000000  0.000000@161
4921860 48  10.000000  0.000000@161
5262972 28  10.000000  0.000000@161
5512872 353 9.985836  0.266123@161
3863552 199 9.010050  1.163372@161
1291150 647 6.327666  1.785968@161
2557490 546 6.307692  1.858434@161
1478839 120 6.200000  0.728761@161
2177771 485 6.150515  1.523922@161
1951261 1091  6.083410  1.736127@161
173 rows × 3 columns@161
6662050 22  10.000000  0.000000@161
4921860 48  10.000000  0.000000@161
5262972 28  10.000000  0.000000@161
5512872 353 9.985836  0.266123@161
3863552 199 9.010050  1.163372@161
1291150 647 6.327666  1.785968@161
2557490 546 6.307692  1.858434@161
1478839 120 6.200000  0.728761@161
2177771 485 6.150515  1.523922@161
1951261 1091  6.083410  1.736127@161
157 rows × 3 columns@161
13 结果分析 @161
3 Idiots (2009)@162
14 ⽣成哑变量 @164
0  1  0  0@164
1  0  1  0@164
2  0  0  1@164
3  1  0  0@164
0  1  0  0  0@164
1  0  1  0  0@164
2  1  0  0  0@164
3  0  0  1  0@164
4  0  0  1  0@164
5  0  0  0  1@164
15 讨厌的SettingWithCopyWarning！！！ @164
16 NumPy 数据归⼀化、分布可视化 @166
3. , 4. , 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3. ,@166
3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.1, 3. ,@166
3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3. , 3.8, 3.2, 3.7, 3.3, 3.2, 3.2,@166
3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2. , 3. , 2.2, 2.9, 2.9,@166
3.1, 3. , 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3. , 2.8, 3. ,@166
2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3. , 3.4, 3.1, 2.3, 3. , 2.5, 2.6,@166
3. , 2.6, 2.3, 2.7, 3. , 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3. , 2.9,@166
3. , 3. , 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3. , 2.5, 2.8, 3.2, 3. ,@166
3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3. , 2.8, 3. ,@166
2.8, 3.8, 2.8, 2.8, 2.6, 3. , 3.4, 3.1, 3. , 3.1, 3.1, 3.1, 2.7,@166
3.2, 3.3, 3. , 2.5, 3. , 3.4, 3. ])@166
0.458, 0.708, 0.583, 0.417, 0.417, 0.833, 1.  , 0.792, 0.625,@167
0.75 , 0.75 , 0.583, 0.708, 0.667, 0.542, 0.583, 0.417, 0.583,@167
0.625, 0.583, 0.5  , 0.458, 0.583, 0.875, 0.917, 0.458, 0.5  ,@167
0.625, 0.458, 0.417, 0.583, 0.625, 0.125, 0.5  , 0.625, 0.75 ,@167
0.417, 0.75 , 0.5  , 0.708, 0.542, 0.5  , 0.5  , 0.458, 0.125,@167
0.333, 0.333, 0.542, 0.167, 0.375, 0.292, 0.  , 0.417, 0.083,@167
0.375, 0.375, 0.458, 0.417, 0.292, 0.083, 0.208, 0.5  , 0.333,@167
0.208, 0.333, 0.375, 0.417, 0.333, 0.417, 0.375, 0.25 , 0.167,@167
0.167, 0.292, 0.292, 0.417, 0.583, 0.458, 0.125, 0.417, 0.208,@167
0.25 , 0.417, 0.25 , 0.125, 0.292, 0.417, 0.375, 0.375, 0.208,@167
0.333, 0.542, 0.292, 0.417, 0.375, 0.417, 0.417, 0.208, 0.375,@167
0.208, 0.667, 0.5  , 0.292, 0.417, 0.208, 0.333, 0.5  , 0.417,@167
0.75 , 0.25 , 0.083, 0.5  , 0.333, 0.333, 0.292, 0.542, 0.5  ,@167
0.333, 0.417, 0.333, 0.417, 0.333, 0.75 , 0.333, 0.333, 0.25 ,@167
0.417, 0.583, 0.458, 0.417, 0.458, 0.458, 0.458, 0.292, 0.5  ,@167
0.542, 0.417, 0.208, 0.417, 0.583, 0.417])@167
17 Pandas 使⽤技巧 @170
1) 使⽤ skiprows 参数， @170
2) x > 0 确保⾸⾏读⼊， @170
3) np.random.rand() > 0.01 表⽰ 99% 的数据都会被随机过滤掉 @170
1 Flask版 hello world @170
27.0.0.1 - - [03/Feb/2020 21:26:50] "GET / HTTP/1.1" 200 -@171
2 Flask之数据⼊库操作 @171
1)导⼊ sqlite3，未安装前使⽤命令 pip install sqlite3@171
2)⼿动创建⼀个数据库实例 db, 命名 test.db @171
3)创建与数据库实例 test.db的连接:@172
4)拿到连接 conn的cursor@172
5)创建第⼀张表 books@172
6)插⼊⼀⾏记录 @172
1,@172
39.0)''')@172
7)⼀次插⼊多⾏记录 @172
8)提交 @172
9)关闭期初建⽴的连接conn@173
10)查看结果 例⼦君使⽤ vs code，在扩展库中选择： SQLite安装。 @173
3 Flask各层调⽤关系 @174
1) 发出请求 @174
2) 视图层 views接收1)步发出的请求，Flask中使⽤解释器的⽅式处理这个求情，实例代码如下，它通常 @174
3) models层会负责创建数据模型，执⾏CRUD操作 @174
4) 模板⽂件层处理html模板 @174
5) 组合后返回html@174
6) models层和html模板组合后返回给views层 @174
7）最后views层响应并渲染到浏览器页⾯，我们就能看到请求的页⾯。 @174
4 Flask之表单操作 @175
1 开篇 @175
2 基本表单 @175
3 html模板 @176
4 index页⾯路由 @176
5 完整代码 @177
6 两个错误 @178
1) CSRF需要配置密码 @178
2) index.html未找到异常 @178
5 Flask之Pyecharts绘图 @178
1, [{@184
